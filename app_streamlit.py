# === Processamento atualizado com UUID ===
if submit:
    with st.spinner("Enviando dados para anÃ¡lise..."):
        headers = {"Authorization": f"Bearer {API_KEY}"}
        dados = {
            "programa_id": programa_id,
            "categoria_id": categoria_id,
            "adicionalidade": adicionalidade,
            "teste_barreiras": teste_barreiras,
            "permanencia_anos": permanencia_anos,
            "vazamento_estimado": vazamento,
            "ods": ods,
            "impacto_social": impacto_social,
            "biodiversidade": biodiversidade,
            "mrv": mrv,
            "validaÃ§Ã£o_por_terceiros": valid_terceiros,
            "dmrv": dmrv,
            "governanÃ§a": governanca,
            "transparÃªncia": transparencia,
            "compatibilidade_net_zero": net_zero
        }

        response = requests.post(f"{API_URL}/avaliar_detalhado", json=dados, headers=headers)

        if response.status_code == 200:
            retorno = response.json()
            resultado = retorno["resultado"]
            uuid = retorno["id"]

            st.success("âœ… AvaliaÃ§Ã£o concluÃ­da com sucesso!")

            st.subheader("ðŸ”Ž Resultado")
            st.metric("PontuaÃ§Ã£o total", resultado["pontuacao_total"])
            st.metric("Desempenho (%)", f'{resultado["porcentagem"]}%')
            st.metric("ClassificaÃ§Ã£o", resultado["classificacao"])
            st.text("Conformidades: " + ", ".join(resultado["conformidades"]))

            st.subheader("ðŸ“Š PontuaÃ§Ã£o por etapa")
            for etapa, score in resultado["etapas"].items():
                st.write(f"Etapa {etapa}: {score}")

            st.subheader("ðŸ“Ž Links salvos")
            st.code(f"{API_URL}/avaliacao/{uuid}", language="bash")
            st.markdown(f"[ðŸ“¥ Baixar RelatÃ³rio PDF]({API_URL}/relatorio/{uuid})")

        else:
            st.error("Erro ao processar a avaliaÃ§Ã£o. Verifique os dados ou tente novamente.")
